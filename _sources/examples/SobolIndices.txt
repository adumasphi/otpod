
`ipynb source code <SobolIndices.ipynb>`_

Sobol Indices
=============

It is required to first build a POD object based on the Kriging
metamodel in order to compute the Sobol indices. It also can be used
only if the input parameters dimension is greater than 2 (without
counting the defect).

.. code:: python

    # import relevant module
    import openturns as ot
    import otpod
    # enable display figure in notebook
    %matplotlib inline

Generate data
-------------

.. code:: python

    inputSample = ot.NumericalSample(
        [[4.59626812e+00, 7.46143339e-02, 1.02231538e+00, 8.60042277e+01],
        [4.14315790e+00, 4.20801346e-02, 1.05874908e+00, 2.65757364e+01],
        [4.76735111e+00, 3.72414824e-02, 1.05730385e+00, 5.76058433e+01],
        [4.82811977e+00, 2.49997658e-02, 1.06954641e+00, 2.54461380e+01],
        [4.48961094e+00, 3.74562922e-02, 1.04943946e+00, 6.19483646e+00],
        [5.05605334e+00, 4.87599783e-02, 1.06520409e+00, 3.39024904e+00],
        [5.69679328e+00, 7.74915877e-02, 1.04099514e+00, 6.50990466e+01],
        [5.10193991e+00, 4.35520544e-02, 1.02502536e+00, 5.51492592e+01],
        [4.04791970e+00, 2.38565932e-02, 1.01906882e+00, 2.07875350e+01],
        [4.66238956e+00, 5.49901237e-02, 1.02427200e+00, 1.45661275e+01],
        [4.86634219e+00, 6.04693570e-02, 1.08199374e+00, 1.05104730e+00],
        [4.13519347e+00, 4.45225831e-02, 1.01900124e+00, 5.10117047e+01],
        [4.92541940e+00, 7.87692335e-02, 9.91868726e-01, 8.32302238e+01],
        [4.70722074e+00, 6.51799251e-02, 1.10608515e+00, 3.30181002e+01],
        [4.29040932e+00, 1.75426222e-02, 9.75678838e-01, 2.28186756e+01],
        [4.89291400e+00, 2.34997929e-02, 1.07669835e+00, 5.38926138e+01],
        [4.44653744e+00, 7.63175936e-02, 1.06979154e+00, 5.19109415e+01],
        [3.99977452e+00, 5.80430585e-02, 1.01850716e+00, 7.61988190e+01],
        [3.95491570e+00, 1.09302814e-02, 1.03687664e+00, 6.09981789e+01],
        [5.16424368e+00, 2.69026464e-02, 1.06673711e+00, 2.88708887e+01],
        [5.30491620e+00, 4.53802273e-02, 1.06254792e+00, 3.03856837e+01],
        [4.92809155e+00, 1.20616369e-02, 1.00700410e+00, 7.02512744e+00],
        [4.68373805e+00, 6.26028935e-02, 1.05152117e+00, 4.81271603e+01],
        [5.32381954e+00, 4.33013582e-02, 9.90522007e-01, 6.56015973e+01],
        [4.35455857e+00, 1.23814619e-02, 1.01810539e+00, 1.10769534e+01]])
    
    signals = ot.NumericalSample(
        [[ 37.305445], [ 35.466919], [ 43.187991], [ 45.305165], [ 40.121222], [ 44.609524],
         [ 45.14552 ], [ 44.80595 ], [ 35.414039], [ 39.851778], [ 42.046049], [ 34.73469 ],
         [ 39.339349], [ 40.384559], [ 38.718623], [ 46.189709], [ 36.155737], [ 31.768369],
         [ 35.384313], [ 47.914584], [ 46.758537], [ 46.564428], [ 39.698493], [ 45.636588],
         [ 40.643948]])

Build POD with Kriging model
----------------------------

.. code:: python

    # signal detection threshold
    detection = 38.

Running the Kriging based POD
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The computing time can be reduced by setting the simulation size
attribute to another value. However the confidence interval is less
accurate.

The sampling size is the number of the samples used to compute the POD
with the Monte Carlo simulation for each defect sizes.

A progress is displayed, which can be disabled with the method
*setVerbose*.

.. code:: python

    POD = otpod.KrigingPOD(inputSample, signals, detection)
    # we can change the number of initial random search for the best starting point
    # of the TNC algorithm which optimizes the covariance model parameters
    POD.setInitialStartSize(500) # default is 1000
    # we can change the sample size of the Monte Carlo simulation
    POD.setSamplingSize(2000) # default is 5000
    # we can also change the size of the simulation to compute the confidence interval
    POD.setSimulationSize(500) # default is 1000
    %time POD.run()


.. parsed-literal::

    Start optimizing covariance model parameters...
    Kriging optimizer completed
    kriging validation Q2 (>0.9): 0.9999
    Computing POD per defect: [==================================================] 100.00% Done
    CPU times: user 32.6 s, sys: 8.08 s, total: 40.7 s
    Wall time: 17.7 s


Show POD graphs
~~~~~~~~~~~~~~~

.. code:: python

    fig, ax = POD.drawPOD(probabilityLevel=0.9, confidenceLevel=0.95,
                          name='figure/PODKriging.png')
    # The figure is saved in PODPolyChaos.png
    fig.show()



.. image:: SobolIndices_files/SobolIndices_10_0.png


Run the sensitivity analysis
----------------------------

The sensitivity analysis can only be performed with POD computed with a
kriging metamodel.

The Sobol indices are aggregated indices computed for the defect sizes
defined in the POD study.

.. code:: python

    # number of simulations
    N = 1000
    sobol = otpod.SobolIndices(POD, N)
    sobol.run()

Draw the figure with given labels
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The default labels are :math:`Xi` but the user can specify its own input
labels. Besides, the figure can be saved specifying the attribute
*name*.

.. code:: python

    fig, ax = sobol.drawIndices(['X1', 'variable2', 'param3'], name='figure/Sobol.png')
    fig.show()



.. image:: SobolIndices_files/SobolIndices_14_0.png


Get the results
~~~~~~~~~~~~~~~

The Sobol indices are given in the OpenTURNS object
`SobolIndicesAlgorithm <http://doc.openturns.org/openturns-latest/sphinx/user_manual/_generated/openturns.SobolIndicesAlgorithm.html>`__.
The method *getSensitivityResult* allows the get this object and then
get back all wanted results.

.. code:: python

    # get the OpenTURNS object
    sobol_result = sobol.getSensitivityResult()
    
    # get aggregated indices
    print("Aggregated first order: {}".format(sobol_result.getAggregatedFirstOrderIndices()))
    print("Aggregated total order: {}".format(sobol_result.getAggregatedTotalOrderIndices()))
    
    # get the confidence interval
    print('First ordre confidence interval:')
    print(sobol_result.getFirstOrderIndicesInterval())


.. parsed-literal::

    Aggregated first order: [0.699866,0.0271797,0.000276829]
    Aggregated total order: [0.938378,0.242988,0.00167926]
    First ordre confidence interval:
    [0.646461, 0.747969]
    [0.00793877, 0.0463859]
    [-0.0014029, 0.0018746]


It is also possible to retreive the Sobol indices for one defect size
among the list.

As example, we want the indices for the 4th defect size in the list. It
may return an error if the indices cannot be computed because no
variability exists. It is the case when the POD is equal to 0 or 1.

.. code:: python

    print("Defect sizes: {}".format(sobol.getDefectSizes()))
    # get indices for a specific defect sizes
    i = 3 # correspond with the 4th value.
    print("\nIndices for defect size {:.3f}: {}".format(sobol.getDefectSizes()[i], sobol_result.getFirstOrderIndices(i)))


.. parsed-literal::

    Defect sizes: [ 3.9549157   4.04659347  4.13827123  4.229949    4.32162677  4.41330454
      4.5049823   4.59666007  4.68833784  4.78001561  4.87169337  4.96337114
      5.05504891  5.14672668  5.23840444  5.33008221  5.42175998  5.51343775
      5.60511551  5.69679328]
    
    Indices for defect size 4.230: [0.758194,0.014649,-0.00248782]


Change the defect sizes list
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is possible to modify the list of the defect sizes either to reduce
the range or to compute the indices for a specific defect value. If only
one defect size is provided, then the aggregated indices correspond to
the indices.

.. code:: python

    sobol.setDefectSizes([4.5])
    sobol.run()

.. code:: python

    # get the OpenTURNS object
    sobol_result = sobol.getSensitivityResult()
    # get aggregated indices
    print("Aggregated first order: {}".format(sobol_result.getAggregatedFirstOrderIndices()))
    print("Aggregated total order: {}".format(sobol_result.getAggregatedTotalOrderIndices()))
    # get indices
    print("First order: {}".format(sobol_result.getFirstOrderIndices()))
    print("Total order: {}".format(sobol_result.getTotalOrderIndices()))


.. parsed-literal::

    Aggregated first order: [0.730209,0.0326692,0.000894105]
    Aggregated total order: [0.97535,0.236755,0.00106565]
    First order: [0.730209,0.0326692,0.000894105]
    Total order: [0.97535,0.236755,0.00106565]


Change the method to compute the indices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OpenTURNS implements 4 methods : Saltelli, Martinez, Jansen and
Mauntz-Kucherenko. These methods can be chosen using the method
*setSensitivityMethod*.

.. code:: python

    sobol.setSensitivityMethod("Martinez")
    sobol.run()

.. code:: python

    # get the OpenTURNS object
    sobol_result = sobol.getSensitivityResult()
    # get aggregated indices
    print("Aggregated first order: {}".format(sobol_result.getAggregatedFirstOrderIndices()))
    print("Aggregated total order: {}".format(sobol_result.getAggregatedTotalOrderIndices()))


.. parsed-literal::

    Aggregated first order: [0.795352,0.0913042,0.047562]
    Aggregated total order: [0.916833,0.211141,0.003963]


